#include<stdio.h>
#include<stdlib.h>
#include<sys/wait.h>
#include<unistd.h>
#include<signal.h>
// 捕捉函數
void catch_sig(int signum)
{
	pid_t wpid;  
	if((wpid = waitpid(-1,NULL,WNOHANG))>0)
	{
		printf("wait kill child %d ok\n",wpid);
	}
}
int main()
{
	//在子進程創建之前先屏蔽sigchild信號
	sigset_t sigchild,oldset;
	sigemptyset(&sigchild);
	sigaddset(&sigchild,SIGCHLD);
	sigprocmask(SIG_BLOCK,&sigchild,&oldset);
	int i = 0;pid_t pid = 0; 
	for(i;i<10;i++)
	{
		pid = fork();
		if(pid == 0)
		{
			break;
		}
	}
		if(i == 10)
		{
			//父進程捕獲信號
				sleep(2);
				struct sigaction act;
				act.sa_flags = 0;
				act.sa_handler = catch_sig;
				sigemptyset(&act.sa_mask);
				sigaction(SIGCHLD,&act,NULL);
				//在信號捕獲之後解除屏蔽
				sigprocmask(SIG_SETMASK,&oldset,NULL);
				while(1)
				{sleep(1);}
		}
		else if(i<10)
		{
				//子進程
				printf("I am %d child, ID is %d\n",i,pid);
			//	sleep(i);
		}	
	return 0;
}
