#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
#include<signal.h>
#include<sys/types.h>
//創建捕捉函數
void catch_sig(int signum)
{
	wait(NULL);
	printf("child is killed \n");
}
int main()
{
	int fd[2];
	int status = pipe(fd);//在創建子進程之前先建立管道，可共享文件
	if(status<0)
	{
		perror("pipe error\n");
		return -1;
	}
	//屏蔽SIGPIPE信號
	sigset_t sigpipe,oldset;
	sigemptyset(&sigpipe);
	sigaddset(&sigpipe,SIGPIPE);
	sigprocmask(SIG_BLOCK,&sigpipe,&oldset);
	pid_t pid = fork();
	if(pid == 0)
	{
		close(fd[0]);
		close(fd[1]);
	}
	else if(pid > 0)
	{
		sleep(3);
		close(fd[0]);
		write(fd[1],"helloworld",10);
		struct sigaction act;
		act.sa_flags = 0;
		act.sa_handler = catch_sig;
		int statues = sigemptyset(&act.sa_mask);
		sigaction(SIGPIPE,&act,NULL);
		int state;
		sigprocmask(SIG_UNBLOCK,&sigpipe,NULL);
	//	wait(&state);
	//	waitpid(-1,&state,WNOHANG);
	//	if(WIFSIGNALED(state))
	//	{
	//		printf("child is killed by %d\n",WTERMSIG(state));
	//	}
		while(1)
		{sleep(1);}
	}
	return 0;
}
